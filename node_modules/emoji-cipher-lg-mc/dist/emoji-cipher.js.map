{"version":3,"sources":["../src/emoji-cipher.js"],"names":[],"mappings":"AAAA;;;;;;;AAEA;;AAEA,IAAM,SAAS;AACb,KAAG,oBAAS,OAAT,CADU;AAEb,KAAG,oBAAS,MAAT,CAFU;AAGb,KAAG,oBAAS,OAAT,CAHU;AAIb,KAAG,oBAAS,SAAT,CAJU;AAKb,KAAG,oBAAS,KAAT,CALU;AAMb,KAAG,oBAAS,QAAT,CANU;AAOb,KAAG,oBAAS,MAAT,CAPU;AAQb,KAAG,oBAAS,OAAT,CARU;AASb,KAAG,oBAAS,UAAT,CATU;AAUb,KAAG,oBAAS,gBAAT,CAVU;AAWb,KAAG,oBAAS,KAAT,CAXU;AAYb,KAAG,oBAAS,MAAT,CAZU;AAab,KAAG,oBAAS,QAAT,CAbU;AAcb,KAAG,oBAAS,OAAT,CAdU;AAeb,KAAG,oBAAS,OAAT,CAfU;AAgBb,KAAG,oBAAS,WAAT,CAhBU;AAiBb,KAAG,oBAAS,UAAT,CAjBU;AAkBb,KAAG,oBAAS,MAAT,CAlBU;AAmBb,KAAG,oBAAS,OAAT,CAnBU;AAoBb,KAAG,oBAAS,UAAT,CApBU;AAqBb,KAAG,oBAAS,UAAT,CArBU;AAsBb,KAAG,oBAAS,YAAT,CAtBU;AAuBb,KAAG,oBAAS,YAAT,CAvBU;AAwBb,KAAG,oBAAS,GAAT,CAxBU;AAyBb,KAAG,oBAAS,UAAT,CAzBU;AA0Bb,KAAG,oBAAS,KAAT;AA1BU,CAAf;;AA6BA,IAAI,gBAAgB,SAAhB,aAAgB,cAAe;AACjC,MAAI,YAAY,EAAhB;AACA,SAAO,IAAP,CAAY,WAAZ,EAAyB,OAAzB,CAAkC,aAAK;AACrC,QAAI,IAAI,YAAY,CAAZ,CAAR;AACA,cAAU,CAAV,IAAe,CAAf;AACD,GAHD;AAIA,SAAO,SAAP;AACD,CAPD;;AASA,IAAM,SAAS,SAAT,MAAS,MAAO;AACpB,SAAO,IAAI,WAAJ,GAAkB,KAAlB,CAAwB,EAAxB,EAA4B,GAA5B,CAAgC,UAAhC,EAA4C,IAA5C,CAAiD,EAAjD,CAAP;AACD,CAFD;;AAIA,IAAM,aAAa,SAAb,UAAa,KAAM;AACvB,SAAQ,6BAA6B,OAA7B,CAAqC,EAArC,KAA4C,CAA7C,GAAkD,OAAO,EAAP,CAAlD,GAA+D,EAAtE;AACD,CAFD;;AAIA,IAAM,SAAS,SAAT,MAAS,WAAY;AACzB,MAAM,gBAAgB,cAAc,MAAd,CAAtB;AACA,MAAI,WAAW,EAAf;;AAEA,MAAI,QAAQ,SAAS,KAAT,CAAe,EAAf,CAAZ;AACA,SAAO,MAAM,MAAN,GAAe,CAAtB,EAAyB;AACvB,QAAI,QAAQ,MAAM,KAAN,EAAZ;AACA,WAAO,CAAC,cAAc,KAAd,CAAR,EAA8B;AAC5B,UAAI,MAAM,MAAN,KAAiB,CAArB,EAAwB,OAAO,QAAP;AACxB,eAAS,MAAM,KAAN,EAAT;AACD;AACD,gBAAY,cAAc,KAAd,CAAZ;AACD;AACD,SAAO,QAAP;AACD,CAdD;;QAgBS,M,GAAA,M;QAAQ,M,GAAA,M;QAAQ,a,GAAA,a;QAAe,M,GAAA,M;;;AAExC,QAAQ,GAAR,CAAY,OAAO,4BAAP,CAAZ","file":"emoji-cipher.js","sourcesContent":["'use strict'\n\nimport { get as getEmoji } from 'node-emoji'\n\nconst cipher = {\n  a: getEmoji('alien'),\n  b: getEmoji('bell'),\n  c: getEmoji('cloud'),\n  d: getEmoji('droplet'),\n  e: getEmoji('ear'),\n  f: getEmoji('family'),\n  g: getEmoji('golf'),\n  h: getEmoji('heart'),\n  i: getEmoji('icecream'),\n  j: getEmoji('jack_o_lantern'),\n  k: getEmoji('key'),\n  l: getEmoji('lock'),\n  m: getEmoji('muscle'),\n  n: getEmoji('notes'),\n  o: getEmoji('ocean'),\n  p: getEmoji('palm_tree'),\n  q: getEmoji('question'),\n  r: getEmoji('rose'),\n  s: getEmoji('smile'),\n  t: getEmoji('thumbsup'),\n  u: getEmoji('umbrella'),\n  v: getEmoji('video_game'),\n  w: getEmoji('wine_glass'),\n  x: getEmoji('x'),\n  y: getEmoji('yin_yang'),\n  z: getEmoji('zzz')\n}\n\nlet reverseObject = givenObject => {\n  let newObject = {}\n  Object.keys(givenObject).forEach( k => {\n    let v = givenObject[k]\n    newObject[v] = k\n  });\n  return newObject\n}\n\nconst encode = str => {\n  return str.toLowerCase().split('').map(encodeChar).join('')\n}\n\nconst encodeChar = ch => {\n  return ('abcdefghijklmnopqrstuvwxyz'.indexOf(ch) >= 0) ? cipher[ch] : ch\n}\n\nconst decode = emojiStr => {\n  const reverseCipher = reverseObject(cipher)\n  let alphaStr = '';\n  \n  var chars = emojiStr.split('')\n  while (chars.length > 0) {\n    var emoji = chars.shift()\n    while (!reverseCipher[emoji]) {\n      if (chars.length === 0) return alphaStr\n      emoji += chars.shift()\n    }\n    alphaStr += reverseCipher[emoji]\n  }\n  return alphaStr\n}\n\nexport { encode, decode, reverseObject, cipher }\n\nconsole.log(encode('abcdefghijklmnopqrstuvwxyz'))"]}